% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/riemannian-metric.R
\name{RiemannianMetric}
\alias{RiemannianMetric}
\title{Abstract Class for Riemannian Metrics}
\description{
An \link[R6:R6Class]{R6::R6Class} object implementing the base
\code{\link{RiemannianMetric}} class. This is an abstract class for Riemannian and
pseudo-Riemannian metrics which are the associated Levi-Civita connection
on the tangent bundle.
}
\author{
Nina Miolane
}
\section{Super classes}{
\code{rgeomstats::PythonClass} -> \code{\link[rgeomstats:Connection]{rgeomstats::Connection}} -> \code{RiemannianMetric}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{signature}}{An integer vector specifying the signature of the
metric.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RiemannianMetric-new}{\code{RiemannianMetric$new()}}
\item \href{#method-RiemannianMetric-metric_matrix}{\code{RiemannianMetric$metric_matrix()}}
\item \href{#method-RiemannianMetric-cometric_matrix}{\code{RiemannianMetric$cometric_matrix()}}
\item \href{#method-RiemannianMetric-inner_product_derivative_matrix}{\code{RiemannianMetric$inner_product_derivative_matrix()}}
\item \href{#method-RiemannianMetric-inner_product}{\code{RiemannianMetric$inner_product()}}
\item \href{#method-RiemannianMetric-inner_coproduct}{\code{RiemannianMetric$inner_coproduct()}}
\item \href{#method-RiemannianMetric-hamiltonian}{\code{RiemannianMetric$hamiltonian()}}
\item \href{#method-RiemannianMetric-squared_norm}{\code{RiemannianMetric$squared_norm()}}
\item \href{#method-RiemannianMetric-norm}{\code{RiemannianMetric$norm()}}
\item \href{#method-RiemannianMetric-normalize}{\code{RiemannianMetric$normalize()}}
\item \href{#method-RiemannianMetric-random_unit_tangent_vec}{\code{RiemannianMetric$random_unit_tangent_vec()}}
\item \href{#method-RiemannianMetric-squared_dist}{\code{RiemannianMetric$squared_dist()}}
\item \href{#method-RiemannianMetric-clone}{\code{RiemannianMetric$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="PythonClass" data-id="get_python_class"><a href='../../rgeomstats/html/PythonClass.html#method-PythonClass-get_python_class'><code>rgeomstats::PythonClass$get_python_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="PythonClass" data-id="set_python_class"><a href='../../rgeomstats/html/PythonClass.html#method-PythonClass-set_python_class'><code>rgeomstats::PythonClass$set_python_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="christoffels"><a href='../../rgeomstats/html/Connection.html#method-Connection-christoffels'><code>rgeomstats::Connection$christoffels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="curvature"><a href='../../rgeomstats/html/Connection.html#method-Connection-curvature'><code>rgeomstats::Connection$curvature()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="curvature_derivative"><a href='../../rgeomstats/html/Connection.html#method-Connection-curvature_derivative'><code>rgeomstats::Connection$curvature_derivative()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="directional_curvature"><a href='../../rgeomstats/html/Connection.html#method-Connection-directional_curvature'><code>rgeomstats::Connection$directional_curvature()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="directional_curvature_derivative"><a href='../../rgeomstats/html/Connection.html#method-Connection-directional_curvature_derivative'><code>rgeomstats::Connection$directional_curvature_derivative()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="exp"><a href='../../rgeomstats/html/Connection.html#method-Connection-exp'><code>rgeomstats::Connection$exp()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="geodesic"><a href='../../rgeomstats/html/Connection.html#method-Connection-geodesic'><code>rgeomstats::Connection$geodesic()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="geodesic_equation"><a href='../../rgeomstats/html/Connection.html#method-Connection-geodesic_equation'><code>rgeomstats::Connection$geodesic_equation()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="injectivity_radius"><a href='../../rgeomstats/html/Connection.html#method-Connection-injectivity_radius'><code>rgeomstats::Connection$injectivity_radius()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="ladder_parallel_transport"><a href='../../rgeomstats/html/Connection.html#method-Connection-ladder_parallel_transport'><code>rgeomstats::Connection$ladder_parallel_transport()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="log"><a href='../../rgeomstats/html/Connection.html#method-Connection-log'><code>rgeomstats::Connection$log()</code></a></span></li>
<li><span class="pkg-link" data-pkg="rgeomstats" data-topic="Connection" data-id="parallel_transport"><a href='../../rgeomstats/html/Connection.html#method-Connection-parallel_transport'><code>rgeomstats::Connection$parallel_transport()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-new"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-new}{}}}
\subsection{Method \code{new()}}{
The \code{\link{RiemannianMetric}} class constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$new(
  dim,
  shape = NULL,
  signature = NULL,
  default_coords_type = "intrinsic"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dim}}{An integer value specifying the dimension of the manifold.}

\item{\code{shape}}{An integer vector specifying the shape of one element of the
manifold. Defaults to \code{NULL}.}

\item{\code{signature}}{An integer vector specifying the signature of the
metric. Defaults to \code{c(dim, 0L)}.}

\item{\code{default_coords_type}}{A string specifying the coordinate type.
Choices are \code{extrensic} or \code{intrinsic}. Defaults to \code{intrinsic}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
An object of class \code{\link{RiemannianMetric}}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-metric_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-metric_matrix}{}}}
\subsection{Method \code{metric_matrix()}}{
Metric matrix at the tangent space at a base point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$metric_matrix(base_point = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric array of shape \verb{dim x dim} storing the inner-product
matrix.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-cometric_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-cometric_matrix}{}}}
\subsection{Method \code{cometric_matrix()}}{
Inner co-product matrix at the cotangent space at a base
point. This represents the cometric matrix, i.e. the inverse of the
metric matrix.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$cometric_matrix(base_point = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric array of shape \verb{dim x dim} storing the inverse of the
inner-product matrix.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-inner_product_derivative_matrix"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-inner_product_derivative_matrix}{}}}
\subsection{Method \code{inner_product_derivative_matrix()}}{
Compute derivative of the inner prod matrix at base point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$inner_product_derivative_matrix(base_point = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric array of shape \verb{dim x dim} storing the derivative of
the inverse of the inner-product matrix.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-inner_product"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-inner_product}{}}}
\subsection{Method \code{inner_product()}}{
Inner product between two tangent vectors at a base point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$inner_product(tangent_vec_a, tangent_vec_b, base_point = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tangent_vec_a}}{A numeric array of shape \code{dim} specifying a tangent
vector at base point.}

\item{\code{tangent_vec_b}}{A numeric array of shape \code{dim} specifying a tangent
vector at base point.}

\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A scalar value representing the inner product between the two
input tangent vectors at the input base point.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-inner_coproduct"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-inner_coproduct}{}}}
\subsection{Method \code{inner_coproduct()}}{
Computes inner coproduct between two cotangent vectors at
base point. This is the inner product associated to the cometric
matrix.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$inner_coproduct(
  cotangent_vec_a,
  cotangent_vec_b,
  base_point = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cotangent_vec_a}}{A numeric array of shape \code{dim} specifying a
cotangent vector at base point.}

\item{\code{cotangent_vec_b}}{A numeric array of shape \code{dim} specifying a
cotangent vector at base point.}

\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A scalar value representing the inner coproduct between the two
input cotangent vectors at the input base point.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-hamiltonian"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-hamiltonian}{}}}
\subsection{Method \code{hamiltonian()}}{
Computes the Hamiltonian energy associated to the cometric.
The Hamiltonian at state \eqn{(q, p)} is defined by \deqn{H(q, p) =
  \frac{1}{2} \langle p, p \rangle_q,} where \eqn{\langle \cdot, \cdot
  \rangle_q} is the cometric at \eqn{q}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$hamiltonian(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{A list with two components: (i) a numeric array of shape
\code{dim} specifying the \emph{position} which is a point on the manifold and
(ii) a numeric array of shape \code{dim} specifying the \emph{momentum} which is
a cotangent vector.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value representing the Hamiltonian energy at \code{state}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-squared_norm"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-squared_norm}{}}}
\subsection{Method \code{squared_norm()}}{
Computes the square of the norm of a vector. Squared norm of
a vector associated to the inner product at the tangent space at a base
point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$squared_norm(vector, base_point = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vector}}{A numeric array of shape \code{dim} specifying a vector.}

\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value representing the squared norm of the input
vector.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-norm"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-norm}{}}}
\subsection{Method \code{norm()}}{
Computes the norm of a vector associated to the inner
product at the tangent space at a base point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$norm(vector, base_point = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vector}}{A numeric array of shape \code{dim} specifying a vector.}

\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This only works for positive-definite Riemannian metrics and
inner products.
}

\subsection{Returns}{
A numeric value representing the norm of the input vector.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-normalize"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-normalize}{}}}
\subsection{Method \code{normalize()}}{
Normalizes a tangent vector at a given point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$normalize(vector, base_point = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{vector}}{A numeric array of shape \code{dim} specifying a vector.}

\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric array of shape \code{dim} storing the normalized versio of
the input tangent vector.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-random_unit_tangent_vec"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-random_unit_tangent_vec}{}}}
\subsection{Method \code{random_unit_tangent_vec()}}{
Generates a random unit tangent vector at a given point.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$random_unit_tangent_vec(base_point = NULL, n_vectors = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{base_point}}{A numeric array of shape \code{dim} specifying a point on
the manifold. Defaults to \code{NULL}.}

\item{\code{n_vectors}}{An integer value specifying the number of vectors to be
generated at \code{base_point}. For vectorization purposes, \code{n_vectors} can
be greater than 1 \emph{iff} \code{base_point} corresponds to a single point.
Defaults to \code{1L}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric array of shape \code{c(n_vectors, dim)} storing random unit
tangent vectors at \code{base_point}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-squared_dist"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-squared_dist}{}}}
\subsection{Method \code{squared_dist()}}{
Squared geodesic distance between two points.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$squared_dist(point_a, point_b, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{point_a}}{A numeric array of shape \code{dim} on the manifold.}

\item{\code{point_b}}{A numeric array of shape \code{dim} on the manifold.}

\item{\code{...}}{Extra parameters to be passed to the \verb{$log()} method of the
parent \code{\link{Connection}} class.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A numeric value storing the squared geodesic distance between the
two input points.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RiemannianMetric-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RiemannianMetric-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RiemannianMetric$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
